{
  "test": "data",
  "P_3": [
    {
      "question": "Which of the following is an example of a problem that belongs to the complexity class P?",
      "options": [
        "Determining if a given graph has a Hamiltonian cycle",
        "Solving the Traveling Salesman Problem (TSP) for a given set of cities",
        "Sorting a list of n elements in ascending order",
        "Factoring a large integer into its prime components"
      ],
      "correct_answer": "Sorting a list of n elements in ascending order",
      "explanation": "Problems in the complexity class P can be solved in polynomial time by deterministic algorithms. Sorting a list of n elements in ascending order is a classic example of a P problem, as there are efficient sorting algorithms like Quicksort and Mergesort that can sort a list in O(n log n) time, which is polynomial in the input size.The other options are not examples of P problems:- Determining if a graph has a Hamiltonian cycle is an NP-complete problem, which is believed to not be solvable in polynomial time.- Solving the Traveling Salesman Problem (TSP) is also an NP-complete problem.- Factoring a large integer into its prime components is believed to be in the complexity class NP, but it is not known whether it is in P or is NP-complete.",
      "complexity_class": "P",
      "difficulty": 3
    },
    {
      "question": "Which of the following is a characteristic of problems in the complexity class P?",
      "options": [
        "Problems in P can be solved in polynomial time by deterministic algorithms",
        "Problems in P are a superset of NP problems",
        "Problems in P are NP-complete",
        "Problems in P do not have known efficient algorithms"
      ],
      "correct_answer": "Problems in P can be solved in polynomial time by deterministic algorithms",
      "explanation": "The defining characteristic of problems in the complexity class P is that they can be solved in polynomial time by deterministic algorithms. This means there are known efficient algorithms that can solve these problems quickly, even as the input size grows larger.Problems in P are a subset of NP, not a superset. NP-complete problems are a special class of NP problems that are the 'hardest' problems in NP, and P problems are not NP-complete (unless P=NP, which is an unproven conjecture).By definition, problems in P have known efficient algorithms, so the statement 'Problems in P do not have known efficient algorithms' is false.",
      "complexity_class": "P",
      "difficulty": 3
    },
    {
      "question": "Which of the following is an accurate statement about P problems in computational complexity theory?",
      "options": [
        "P problems are a subset of NP problems that can be solved in polynomial time by deterministic algorithms.",
        "P problems are a superset of NP problems that can be solved in polynomial time by deterministic algorithms.",
        "P problems are a subset of NP-complete problems that can be solved in polynomial time by deterministic algorithms.",
        "P problems are a superset of NP-hard problems that can be solved in polynomial time by deterministic algorithms."
      ],
      "correct_answer": "P problems are a subset of NP problems that can be solved in polynomial time by deterministic algorithms.",
      "explanation": "The key facts about P problems are:1. P problems are a subset of NP problems, not a superset. This means that all P problems are also in NP, but there may be some NP problems that are not in P.2. P problems can be solved in polynomial time by deterministic algorithms. This means there are known efficient algorithms that can solve these problems quickly.3. P problems are not the same as NP-complete or NP-hard problems. Those are a distinct class of more difficult problems. Unless P=NP (which is an open question), P problems are not NP-complete.Therefore, the first option accurately describes the properties of P problems, making it the correct answer. The other options contain inaccurate statements about the relationships between P, NP, NP-complete, and NP-hard problems.",
      "complexity_class": "P",
      "difficulty": 3
    },
    {
      "question": "Which of the following problems is an example of a P problem?",
      "options": [
        "Traveling Salesman Problem",
        "Sorting a list of n elements",
        "Factoring a large integer",
        "Deciding whether a graph has a Hamiltonian cycle"
      ],
      "correct_answer": "Sorting a list of n elements",
      "explanation": "P problems are those that can be solved in polynomial time by deterministic algorithms. Sorting a list of n elements, such as with quicksort or mergesort, is a classic example of a P problem with efficient polynomial-time solutions.The Traveling Salesman Problem and deciding whether a graph has a Hamiltonian cycle are both NP-complete problems, which are believed to not have efficient polynomial-time solutions. Factoring a large integer is an NP-hard problem, which is at least as difficult as the NP-complete problems.Only sorting a list of n elements is a known P problem with a provably efficient algorithm. The other options are examples of NP-complete or NP-hard problems, which are not known to be solvable in polynomial time.",
      "complexity_class": "P",
      "difficulty": 3
    },
    {
      "question": "Which of the following is an example of a P problem?",
      "options": [
        "Traveling Salesman Problem",
        "Sorting a list of n elements",
        "Factoring a large integer",
        "Determining if a graph is Hamiltonian"
      ],
      "correct_answer": "Sorting a list of n elements",
      "explanation": "The Traveling Salesman Problem, factoring large integers, and determining if a graph is Hamiltonian are all examples of NP-complete problems, which are a subset of NP problems. In contrast, sorting a list of n elements is an example of a P problem. P problems can be solved in polynomial time by deterministic algorithms, and efficient sorting algorithms like Quicksort and Mergesort have been developed for this task. Since sorting is in the P complexity class, it can be solved much more efficiently than NP-complete problems, which are believed to not have efficient polynomial-time solutions.",
      "complexity_class": "P",
      "difficulty": 3
    },
    {
      "question": "Which of the following is an accurate statement about P problems in computational complexity theory?",
      "options": [
        "P problems can be solved in polynomial time by deterministic algorithms",
        "P problems are a superset of NP problems",
        "P problems are NP-complete",
        "P problems do not have known efficient algorithms"
      ],
      "correct_answer": "P problems can be solved in polynomial time by deterministic algorithms",
      "explanation": "P problems are a class of computational problems that can be solved in polynomial time by deterministic algorithms. This means there are efficient, known algorithms that can solve these problems quickly, even as the input size grows. The other options are incorrect:- P is a subset of NP, not a superset. NP contains all problems that can be verified quickly, while P contains only the problems that can be solved quickly.- P problems are not NP-complete. NP-complete problems are the 'hardest' problems in NP, and P problems are a proper subset of NP.- By definition, P problems do have known efficient algorithms that can solve them in polynomial time.",
      "complexity_class": "P",
      "difficulty": 3
    },
    {
      "question": "Which of the following is a characteristic of problems in the complexity class P?",
      "options": [
        "Problems in P can be solved by deterministic algorithms in polynomial time",
        "Problems in P are a superset of NP-complete problems",
        "Problems in P have no known efficient algorithms",
        "Problems in P are a subset of NP-hard problems"
      ],
      "correct_answer": "Problems in P can be solved by deterministic algorithms in polynomial time",
      "explanation": "The complexity class P contains problems that can be solved by deterministic algorithms in polynomial time. This means there are known efficient algorithms that can solve these problems quickly, even as the input size grows. In contrast, the other options are incorrect:- Problems in P are not a superset of NP-complete problems, they are a subset of NP.- Problems in P do have known efficient algorithms by definition.- Problems in P are not a subset of NP-hard problems, which are even more difficult than NP-complete problems.",
      "complexity_class": "P",
      "difficulty": 3
    },
    {
      "question": "Which of the following problems is an example of a P problem?",
      "options": [
        "Traveling Salesman Problem",
        "Sorting a list of n elements",
        "Factoring a large integer",
        "Determining if a Sudoku puzzle has a solution"
      ],
      "correct_answer": "Sorting a list of n elements",
      "explanation": "P problems are those that can be solved in polynomial time by deterministic algorithms. Sorting a list of n elements, such as with the merge sort or quicksort algorithms, is a classic example of a P problem that has known efficient solutions.The Traveling Salesman Problem is an NP-complete problem, which means it is unlikely to have a polynomial-time solution. Factoring large integers is believed to be an NP problem, and determining if a Sudoku puzzle has a solution is also an NP-complete problem. Only sorting a list of n elements is a problem that is known to be solvable in polynomial time, making it a P problem.",
      "complexity_class": "P",
      "difficulty": 3
    },
    {
      "question": "Which of the following is an example of a P problem?",
      "options": [
        "Sorting a list of n elements",
        "Solving the Traveling Salesman Problem",
        "Factoring a large integer",
        "Determining if a graph is Hamiltonian"
      ],
      "correct_answer": "Sorting a list of n elements",
      "explanation": "P problems are those that can be solved in polynomial time by deterministic algorithms. Sorting a list of n elements is a well-known P problem, with efficient sorting algorithms like Quicksort and Mergesort running in O(n log n) time.The Traveling Salesman Problem is an NP-Complete problem, which means it is unlikely to have an efficient polynomial-time algorithm. Factoring large integers is believed to be an NP-Hard problem, and determining if a graph is Hamiltonian is also an NP-Complete problem. Therefore, these are not examples of P problems.",
      "complexity_class": "P",
      "difficulty": 3
    },
    {
      "question": "Which of the following is an accurate statement about problems in the complexity class P?",
      "options": [
        "P problems can be solved in polynomial time by deterministic algorithms",
        "P problems are a superset of NP problems",
        "P problems are NP-complete",
        "P problems do not have known efficient algorithms"
      ],
      "correct_answer": "P problems can be solved in polynomial time by deterministic algorithms",
      "explanation": "The definition of the complexity class P is that the problems in this class can be solved in polynomial time by deterministic algorithms. This means there are known efficient algorithms that can solve these problems quickly, even as the input size grows larger.P is a subset of NP, not a superset. NP-complete problems are a special class of NP problems that are the 'hardest' problems in NP, and P problems are not NP-complete (unless P=NP, which is an unproven conjecture).By definition, P problems do have known efficient algorithms, so the statement that they 'do not have known efficient algorithms' is incorrect.",
      "complexity_class": "P",
      "difficulty": 3
    }
  ]
}